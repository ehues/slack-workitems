// Generated by CoffeeScript 1.7.1
(function() {
  var Slack, request, _;

  request = require('request');

  _ = require('lodash');

  Slack = (function() {
    function Slack(team, token, options) {
      this.team = team;
      this.token = token;
      this.options = options;
//      this.incomingUrl = "https://" + team + ".slack.com/services/hooks/incoming-webhook?token=" + token;
      this.incomingUrl = "https://hooks.slack.com/services/" + token;
      this.validateArguments();
    }

    Slack.prototype.validateArguments = function() {
      if (this.team == null) {
        throw new Error("Team name required");
      }
      if (this.token == null) {
        throw new Error("Token required");
      }
    };

    Slack.prototype.notify = function(message, callback) {
      var chn, count, options, total, _i, _len, _ref, _results;
      if ((message == null) || (_.isObject(message && ((message != null ? message.text : void 0) == null)))) {
        throw new Error('Message required');
      }
      options = {};
      options.text = typeof message === 'string' ? message : message.text;
      options.channel = message.channel == null ? '#general' : message.channel;
      options = _.extend(options, this.options);
      options = _.extend(options, message);
      if (_.isArray(options.channel)) {
        total = options.channel.length;
        count = 0;
        _ref = options.channel;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          chn = _ref[_i];
          options.channel = chn;
          _results.push(request.post(this.incomingUrl, {
            body: JSON.stringify(options)
          }, function(err, resp, body) {
            count++;
            if ((callback != null) && count === total) {
              if (body === 'ok') {
                return callback(null, body);
              } else {
                return callback(err || body);
              }
            }
          }));
        }
        return _results;
      } else {
        return request.post(this.incomingUrl, {
          body: JSON.stringify(options),
          followAllRedirects: true
        }, function(err, resp, body) {
          if (callback != null) {
            if (body === 'ok') {
              return callback(null, body);
            } else {
              return callback(err || body);
            }
          }
        });
      }
    };

    return Slack;

  })();

  module.exports = Slack;

}).call(this);
